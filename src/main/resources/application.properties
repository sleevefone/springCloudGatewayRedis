spring.application.name=openapi
server.port=8888

# Redis Configuration
spring.data.redis.host=localhost
spring.data.redis.port=6379

# Spring Cloud Gateway
spring.cloud.gateway.discovery.locator.enabled=true

# --- BEST PRACTICE for Reactive Logging ---
# This pattern uses the standard keys provided by Micrometer Tracing.
logging.pattern.console=%d{yyyy-MM-dd'T'HH:mm:ss.SSSXXX} %-5p ${PID:- } --- [%15.15t] %-40.40logger{39} [${spring.application.name:-openapi},%X{traceId:-},%X{spanId:-}] : %m%n

# --- BEST PRACTICE for Tracing ---
# This ensures that EVERY request is traced, which is essential for development and debugging.
management.tracing.sampling.probability=1.0

# **CRITICAL FIX: Set the logging level for Spring to DEBUG to activate MDC bridging.**
#logging.level.org.springframework=DEBUG

# --- DataSource Configuration ---
spring.datasource.url=jdbc:mysql://localhost:3307/gateway_db?useUnicode=true&characterEncoding=utf8&serverTimezone=Asia/Shanghai
spring.datasource.username=root
spring.datasource.password=123456
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver

# --- JPA/Hibernate Configuration ---
spring.jpa.hibernate.ddl-auto=update
#spring.jpa.show-sql=true

# --- Admin Panel Feature Switch ---
gateway.admin.enabled=true

logging.pattern.level="%5p traceId=%X{traceId}"

#所以，uri 并不是一个可有可无的“跳转”配置，而是定义了一条路由规则的根本目的。•predicates 回答了“对什么样的请求应用此规则？”•filters 回答了“在转发请求前后要做什么检查或修改？”•uri 回答了“检查通过后，请求最终应该被送到哪里？”
# Spring Cloud Gateway 配置
#spring.cloud.gateway.routes[0].id=example_route
#spring.cloud.gateway.routes[0].uri=http://localhost:9999
#spring.cloud.gateway.routes[0].predicates[0]=Path=/api/**
#spring.cloud.gateway.routes[0].filters[0]=IpWhiteBlackList=whitelist,gateway:ip:whitelist,gateway:ip:blacklist
#spring.cloud.gateway.routes[0].filters[1]=IpWhiteBlackList=blacklist,gateway:ip:whitelist,gateway:ip:blacklist


# ===================================================================
# ACTUATOR & METRICS CONFIGURATION
# ===================================================================

# Expose only the prometheus, health, and info endpoints over the web
management.endpoints.web.exposure.include=prometheus,health,info

# Add a global tag to all metrics to identify this application
management.metrics.tags.application=${spring.application.name:openapi-gateway}

# Optional: Show detailed health information when authorized
management.endpoint.health.show-details=when_authorized


## Keystore configuration
#server.ssl.key-store=classpath:keystore.p12
#server.ssl.key-store-password=yourpassword
#server.ssl.key-store-type=PKCS12
#server.ssl.key-alias=youralias
#server.ssl.key-password=yourpassword
#
## Ensure the gateway's internal HTTP client uses a standard, secure trust manager
## for its outgoing SSL connections. Setting this to 'false' is the secure default.
#spring.cloud.gateway.httpclient.ssl.use-insecure-trust-manager=false

spring.profiles.active=dev